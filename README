
To do:

1. Faulty moves

- Queen d5g8 still drives into board!
- also, Queen h8xf8 (after capture)
- after capture, picking up rook at a8 drives fingers into board.

- rook a1b1 didn't work well.  also rook b1xb2.  also rook e1d1.

2. Allow human to pick up a piece and hold it for a while

3. String waypoints together for smooth, non-stop movement

4. Increase arm speed

5. Machine should recognize when it is checkmated & not move (or knock over its king?).

   dgt.chess.decide seems to return 'a1a1' for both lost and stalemated positions.

6. Machine should recognize when it has won & celebrate

7. Push pieces without picking them up

   it would be good to push pieces in the x,y plane rather than pick them up, especially pawns.
   first, slight vertical raise:

     % rosrun kinova_demo pose_action_client.py -v -r m1n4s200 mdeg -- 0 0 -0.008 0 0 0

   need to modify all fourth joint angles to be exactly 180, to avoid wrist spinning!

   also need to calculate a little x offset because y movements are not straight

8. Currently freezes if human player has moved but his king remains in check

9. White pawn promotion isn't working yet
   
   not sure what will happen, need to try makemove with engine's move

10. Add random "thinking time" before robot's move.

11. Change up the opening!

===================================================
================= OLD NOTES =======================
===================================================

Chess engines I looked at:

1. gnuchess
2. fruit
3. hoichess
4. phalanx
5. stockfish
6. fairychess
7. toga (?)
8. glarung (?)
9. pychess

=============================================================
How do programs today currently interact with chess engines?

A good example is xboard, an X-Windows graphical user interface. 

gnuchess and xboard run as separate linux processes that talk to each other.

Things that xboard communicates to gnuchess:
  https://www.gnu.org/software/xboard/engine-intf.html

Things that gnuchess communicates to xboard:
  https://www.gnu.org/software/xboard/engine-intf.html#9

Need to understand & duplicate how these servers communicate.

=============================================================
How is a chess position represented formally?

As a string.  There are different standards.  One is EPD.  For example,
right after first move e2e4, the position is:

rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3

Notice there are four parts to this, separated by spaces:

  Part 1: Where pieces are on the board
  Part 2: Whose move it is
  Part 3: Whether certain pieces have moved prior in the game (long history)
  Part 4: Whether square that was just "skipped" by a pawn (short history)

Parts 3 & 4 tell whether it's legal to castle, or whether it's legal
to capture a pawn "en passant".

So to check whether a move is legal, it's not sufficient to simply look 
at the board!  You need to remember the history of the game.

A chess engine like gnuchess will keep track of where you are in the game, 
whereas an interface like xboard will not, since it merely needs to show 
where the pieces are.

=============================================================
How should the main loop program communicate with the robot arm?

What is the robot arm's Linux API?

What operations are supported?

=============================================================
How should the robot arm execute a move?

1. Positioning the arm: 
      How to arrive at a given <x,y,z> position of piece to move?
2. Does z need to depend on the height of the piece being moved?
3. Gripping: Does gripping tolerate noise?
4. Moving: Raise piece to above-king height, move to <x,y,z> descend, drop.
5. Advanced moving: Only raise to height necessary for clearing any 
     intervening pieces between source square and destination square.
6. Capturing: 
     a) Remove captured human piece.  Captured pieces should be 
        dropped into a bin (one bin per player).
     b) Move own robot piece.
7. Castling: 
     a) Move king.
     b) Move rook.
8. If robot has checkmated human: 
     a) Make move.
     b) Make victory gesture.
9. If robot has checked human:
     a) Make move.
     b) Gesture towards human's king.
10. No matter what, always return robot arm to initial position.

=============================================================
How should the robot understand when the human's move is complete?

1. Position should change, then stay unchanged for 3 seconds.
2. Exception: One human piece is "in the air" and all other pieces
   are unchanged.  In this case, keep waiting.

=============================================================
How should the human's move be interpreted and responded to?

1. Legal move (non-checkmate).
   Interpretation: Normal move.
   Action: Robot should move next.

2. Legal move that checkmates robot.
   Interpretation: Human won!
   Action: Robot should wait 3 seconds, then knock over own king
           and return robot arm to start position.

3. Illegal move resulting in check of human's king.
   Interpretation: Human either failed to escape check, or moved a 
                   piece that resulted in "revealed" check.
   Action: Robot make "no, no" gesture.
           Return board to previous state by moving human piece.
           (If there was a capture, we can't fix it!)
           Gesture at human's king.
           Wait for human to move again.

4. Illegal move due to other cause.
   Interpretation: Human made some kind of mistake.
   Action: Robot make "no, no" gesture.
           Return board to previous state by moving human piece.
           (If there was a capture, we can't fix it!)
           Wait for human to move again.

5. Position changes radically to legal start position.
   Interpretation: Human wants to start over.
   Action: If robot has white pieces, then robot should move.
           If robot has black pieces, then robot should wait.

6. Position changes to legal start position, except K and Q reversed.
   Interpretation: Human wants to start over, but set it up wrong.
   Action: Swap relevant king(s) and queen(s).
           If robot has white pieces, then robot should move.
           If robot has black pieces, then robot should wait.

7. Radical shift of the board to a new, non-starting position.
   Action: Wait for human to move.  
           This assigns color to human.
           Then robot should take the other side, and move.
      OR
   Action: Guess robot's color based on positions of pieces.
           Robot should move.

8. Other?  Treat like 7.

=============================================================
How should robot move in order to knock over a king, upon game's end?

1. Need robot motion for this.

=============================================================

=============================================================

=============================================================

=============================================================

=============================================================

=============================================================


% rosversion -d
kinetic


